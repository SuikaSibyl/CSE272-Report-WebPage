{"version":3,"file":"js/app.d11dfde4.js","mappings":"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","sources":["webpack://mltwebpage/./src/App.vue","webpack://mltwebpage/./src/components/ReportPage.vue","webpack://mltwebpage/./src/components/ReportPage.vue?5244","webpack://mltwebpage/./src/App.vue?7ccd","webpack://mltwebpage/./src/main.js","webpack://mltwebpage/webpack/bootstrap","webpack://mltwebpage/webpack/runtime/chunk loaded","webpack://mltwebpage/webpack/runtime/compat get default export","webpack://mltwebpage/webpack/runtime/define property getters","webpack://mltwebpage/webpack/runtime/global","webpack://mltwebpage/webpack/runtime/hasOwnProperty shorthand","webpack://mltwebpage/webpack/runtime/jsonp chunk loading","webpack://mltwebpage/webpack/startup"],"sourcesContent":["<template>\n  <ReportPage/>\n</template>\n\n<script>\nimport ReportPage from './components/ReportPage.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    ReportPage,\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n}\n\nnav {\n  padding: 30px;\n}\n\nnav a {\n  font-weight: bold;\n  color: #2c3e50;\n}\n\nnav a.router-link-exact-active {\n  color: #4078c0;\n}\n</style>\n","<template>\n  <div class=\"home\">\n    <div class=\"common-layout\">\n\n      <el-container>\n      <el-container>\n        <el-header>\n          <h1 id=\"Report For CSE 274\">Implementation of BDPT and MMLT on GPU with<br/> Simple Primal Sample Space Nueral Mutation</h1>\n        </el-header>\n        <el-container>\n          <el-container>\n            <el-main>\n              <el-row class=\"row-bg\"><br/></el-row>\n              <!-- Chapter 1: Introduction -->\n              <el-row class=\"row-bg\">\n                <h2 id=\"1. Introduction\" style=\"text-align:left\">1. Introduction</h2>\n                <p style=\"text-align:left\">\n                  In this project, I implemented BDPT (Bidirectional Path Tracing) <a href=\"#cite-veach\">[1]</a> \n                  and MMLT (Multiplexed metropolis Light Transport) <a href=\"#cite-mmlt\">[2]</a> on my GPU renderer,\n                  <a href=\"https://github.com/SuikaSibyl/SIByLEngine2023\">SIByL Engine</a>. \n                  Also I have some naive ideas and experiments on Neural Mutation for Metropolis light transport\n                  as well as common Metropolis-Hastings sampling.\n                </p>\n                <p style=\"text-align:left\">\n                  The render part is implemented in C++ with Vulkan, and the implementation is only compatible with Windows OS and Nvidia RTX GPU.\n                  All the results are run and measured on my personal RTX 3070 laptop. The neural part is implemented in Python with PyTorch.\n                  The inter-process communication is done with localhost socket.\n                </p>\n                <p style=\"text-align:left\">\n                  In <a href=\"#2.\">Section 2</a> I will breifly talk about how I implement BDPT and MMLT on GPU, without lots of details, and show\n                  some results and comparison with unidirectional path tracing.\n                </p>\n                <p style=\"text-align:left\">\n                  Then, <a href=\"#3.\">Section 3</a> discussed something about normalizing flow and neural importance sampling. I will also show some results\n                  and comparison in 2D monochrome image case.\n                </p>\n                <p style=\"text-align:left\">\n                  And <a href=\"#4.\">Section 4</a> talks about \"Latent Space Mutation\", a (probably) new concept I proposed and why I think it might be useful.\n                  Some experiments are also shown both in 2D monochrome image case and single-depth MLT case (although turned out to be a failure ...).\n                </p>\n              </el-row>\n              <!-- Chapter 2: BDPT & MMLT -->\n              <el-row class=\"row-bg\" justify=\"left\">\n                <h2 id=\"2.\">2. BDPT & MMLT on GPU</h2>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"left\">\n                <h3 id=\"2.1\" style=\"margin-top: 0in;\">2.1 Brief Introduction</h3>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  BDPT and MLT are proposed by Veach <a href=\"#cite-veach\">[1]</a>. PSSMLT <a href=\"#cite-pssmlt\">[4]</a> is a simple version of the vanilla\n                  MLT that do mutation in primal sample space. And MMLT <a href=\"#cite-mmlt\">[2]</a> is a different way of doing PSSMLT, that has a static\n                  path depth for each Markov Chain. I implement both BDPT and MLT in my renderer referring to the implementation of PBRT <a href=\"#cite-pbrt\">[3]</a>.\n                  Volumetric rendering is not supported in this project.\n                </p>\n              </el-row>\n\n              <el-row class=\"row-bg\" justify=\"left\">\n                <h3 id=\"2.1\" style=\"margin-top: 0in;\">2.2 Implementation and Experiments</h3>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  For both BDPT and MLT, splatting is required for contributing to the film. As far as I could tell, there are three ways to do splatting.\n                  (1) we could use atomicAdd to add the contribution to the film, (2) we could use a atomic buffer to do per-pixel spinlock and do mutex adding,\n                  (3) we could use a temporary buffer to store the contribution, and then\n                  dispatch a set of pixel-size fragment shader to do adding alpah blending. I use the first method, although it need three atomic buffer instead \n                  of one, the performance is probabily better than the second method, I actually could not compare it because my per-pixel spinlock get deadlock\n                  on raygen shader warps although it works fine for compute shader...\n                </p>\n                <p style=\"text-align:left\">\n                  To implement BDPT, I use only one large kernel, tracing 1 spp BDPT for each pixel. I did not optimize the kernel too much, but reduce the\n                  original cost of 170+ ms per frame to 10+ms per frame by a simple trick: manually unrolling the loop for path connection. The main reason \n                  is not carefully tested, but I guess it is because unrolling prevent some fake loop carried dependency, which is harmful for pipeline.\n                  I just observed severe long scoreboard stall when I use the original loop, and the stall is gone after unrolling.\n                </p>\n                <p style=\"text-align:left\">\n                  To implement MMLT, I designed a dynamic pass pipeline for interactive frame rate. The first part should be boostrap sample generation.\n                  We should generate more boostrap samples to choosen from and compute average b, but running all samples in one frame is too slow. Therefore\n                  we could armotize the cost by running a few samples in each frame. After some frames, we then begin mutation pass. For each frame we run\n                  one mutation for one Markov Chain per thread. Notice that the first frame in \"mutation\" pass is not mutation, but choose samples from boostrap.\n                  I use hierarchical 2d mip for sampling boostrap samples. The per-frame task assignment is shown below:\n                </p>\n                <el-row class=\"row-bg\" justify=\"center\">\n                <el-col :span=\"17\">\n                  <el-image style=\"align:center\" src=\"https://imagehost-suikasibyl-us.oss-us-west-1.aliyuncs.com/img/20230324094213.png\" />\n                  <p><code>\n                    My cross-frame MMLT pipeline.\n                  </code></p>\n                  </el-col>\n                </el-row>\n                <p style=\"text-align:left\">\n                  An interesting design I want to mention is how to get PSS sample from boostrap. We have far more boostrap samples than chains per frame,\n                  if we store the PSS samples for boostrap samples, it would need a temporary buffer which is large and would not be used later. Instead,\n                  I recover the random seed for the boostrap sample chosen, and generate the PSS sample sequence on the fly. \n                </p>\n                <p style=\"text-align:left\">\n                  BDPT has better convergence rate than UDPT in many cases. In the demo scene shown below, BDPT is also slightly better than UDPT. The scene is just\n                  a simple set of still lifes in the room from Veach's MLT scene. The only light is a sphere in the next room, and the camera is in the room with the still lifes.\n                  The scene is rendered with 500 spp, and the result is shown below.\n                </p>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"center\">\n                <el-col>\n                  <div id=\"udptvsbdpt\"></div>\n                  <p><code>left: unidirectional 500 spp | right: bidirectional 500 spp</code></p>\n                </el-col>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  MMLT has better results than BDPT, as shown in the figure below. (Even though lookes like to have more fireflies somehow.)\n                  We could clearly see that MLT is less noisy than BDPT under same spp. But as I am using MMLT, it actually take much more time because\n                  it need at least 4 times path numbers as MMLT trace one path for each depth, so for a 3-bounce path, it need 3 more paths per sample.\n                  And I realize that this dummy MMLT is less efficient thant BDPT, as BDPT actually has some kind of coherency in neighbor paths,\n                  this dummy MMLT is completely random and has larger divergence.\n                </p>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"center\">\n                <el-col>\n                  <div id=\"bdptvsmlt\"></div>\n                  <p><code>left: bidirectional 500 spp | right: mmlt 500 mpp</code></p>\n                </el-col>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  Actually I should do some obvious optimizing for MMLT on GPU. As for each Markov Chain, the depth is fixed, so we could actually do some\n                  sort after choosing boostrap path, and do 4 different tracing drawcall to issue 4 bundles of chains with different depth. This could reduce lots of unnecessary\n                  thread divergence, and easily achieve coherent with only one sort (actually only one radix sort pass or some compaction passes) per rendering, which is much simpler than optimizing BDPT for GPU.\n                </p>\n                <p style=\"text-align:left\">\n                  In my observation, thread divergence is the main problem for BDPT and MLT, so I beleive this optimization is really worth to implement \n                  and could hopefully boost the performance. But as the deadline is approaching, I have to leave this optimization for future work.\n                </p>\n              </el-row>\n\n                <el-row class=\"row-bg\" justify=\"center\">\n                  <el-col :span=\"17\">\n                    <iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/tmI0e2OMLN4\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe>\n                  </el-col>\n                </el-row>\n\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  <br/>Both algorithms are integrated into my interactive renderer, as shown in the video. I guess the one of the most important target for porting these algorithm into\n                  an interactive renderer is to limit the cost per frame. Otherwise a long stall would get the whole system stuck. In cpu applications we could use multi-threading to\n                  decouple UI and rendering, but as I am using ImGui, getting the GPU queue stack would also affect the UI. And of course it would be important to optimize the code\n                  for GPU architecture for better performance.\n                </p>\n              </el-row>\n\n              <!-- Chapter 3: Neural Importance Sampling -->\n              <el-row class=\"row-bg\" justify=\"left\">\n                <h2 id=\"3.\">3. Neural Importance Sampling</h2>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  The object of the project is about exploring the neural mutation for MLT, so it might seems a little bit off-topic to talk about neural importance sampling here.\n                  But as normalizing flow is a very useful technique for generative models, I think it is worth to talk about it a little bit.\n                  Neural importance sampling is probably the first work that I know that uses normalizing flow in rendering,\n                  and I personally think it could be used in neural mutation, see <a href=\"#4.\">Section 4</a> for more details.\n                </p>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"left\">\n                <h3 id=\"3.1\">3.1 Theory behind NIS</h3>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  Normalizing flow is an useful technique to generate samples subject to some certain distributions by a neural network.\n                  But the really interesting part that makes it different from other generative models is that it actually creates a\n                  bijection between two distributions, which means the jacobian of the transformation is computable.\n                </p>\n                <p style=\"text-align:left\">\n                  NICE <a href=\"#cite-nice\">[5]</a> proposed a simple way to construct a bijection by using a structure called \"Coupling Layer\".\n                  RealNVP <a href=\"#cite-realNVP\">[6]</a> further extend that into \"Affine Coupling Layer\", which introduces non-volume-preserving transformation in each layer and is thus more powerful.\n                  GLOW <a href=\"#cite-glow\">[7]</a> proposed another primitive to construct a bjicetion, the invertible 1x1 Convolutions.\n                </p>\n                <p style=\"text-align:left\">\n                  Müller et al. <a href=\"#cite-nis\">[8]</a> and Zheng et al. <a href=\"#cite-realNVP\">[9]</a> introduce normalizing flow into rendering and use it for neural importance sampling.\n                  Generally speaking, both of them use a normalizing flow to build a bijection between [0,1] uniform distribution and the target radiance distribution, so that they could do importance sampling.\n                </p>\n                <p style=\"text-align:left\">\n                  Zheng et al. <a href=\"#cite-realNVP\">[9]</a> did a simpler but inspiring work. They basically use the RealNVP to importance sample the primal space vector for path construction.\n                  It really provides a lot technical details for me to implement this stuff, and actually what I implemented in PyTorch is very similar to their work.\n                  A practical contribution is about how to take normalizing flow which is primarily on <math-jax latex=\"{\\mathbb{R}}^n\"/> into <math-jax latex=\"[0,1]^n\" />.\n                </p>\n              </el-row>\n\n              <el-row class=\"row-bg\" justify=\"center\">\n                <el-image style=\"align:center\" src=\"https://imagehost-suikasibyl-us.oss-us-west-1.aliyuncs.com/img/20230321230003.png\" />\n                <p><code>\n                  Computational structure of Zheng et al.'s neural importance sampling model based on Real NVP <br/> \n                  from <a href=\"#cite-realNVP\">[9]</a> .\n                  I implement almost the same thing in PyTorch for later experiments.\n                </code></p>\n              </el-row>\n              \n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  They use a scaling and logit and their inverse in the start and their inverse (sigmoid and inverse scaling) in the end of the flow to mapping between \n                  <math-jax latex=\"[0,1]^n\" /> and <math-jax latex=\"{\\mathbb{R}}^n\"/>. The scaling layer is actually a constant scaling tha maps <math-jax latex=\"[0,1]\"/> \n                  to <math-jax latex=\"[\\epsilon,1-\\epsilon]\"/> which prevents logit producing too large number, which will cause severe numerical problem and introducing\n                  more NaN in both results and gradients.\n                </p>\n                <p style=\"text-align:left\">\n                  However, in training, they use the traditional loss function for normalizing flow, a.k.a. maximizing the log likelihood of generating target distribution.\n                  This implies we need to sample from the target distribution, which is not straightforward in rendering. But we could still do it by some indirect way, like\n                  MCMC or resampling <a href=\"#cite-ris\">[10]</a>.\n                </p>\n                <p style=\"text-align:left\">\n                  Müller et al. <a href=\"#cite-nis\">[8]</a> gives some advanced contributions including a more powerful piecewise-polynomial coupling layer,\n                  and deriving two new loss functions for neural importance sampling. Interestingly, they showed that minimizing the KL divergence amounts to maximizing\n                  a weighted log likelihood.\n                </p>\n                <p style=\"text-align:left\">\n                  The KL divergence between target distribution <math-jax latex=\"p(x)\"/> and the learned distribution <math-jax latex=\"q(x)\"/> is:\n                </p>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"center\">\n                <p>\n                  <math-jax latex=\"$$\n                  \\begin{aligned}\n                  KL(p||q;\\theta) &= \\int_\\Omega p(x) \\log \\frac{p(x)}{q(x;\\theta)} {\\rm d}x\\\\\n                                  &= \\int_\\Omega p(x) \\log p(x) {\\rm d}x - \\int_\\Omega p(x) \\log q(x;\\theta) {\\rm d}x\\\\\n                  \\end{aligned}\n                  $$\" />\n                </p>\n              </el-row>\n\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  In practice we could not get <math-jax latex=\"p(x)\"/> as we do not know the normalizing term, and we could not differentiate the <math-jax latex=\"f(x)\"/>\n                  with respect to <math-jax latex=\"x\"/> (<del>although I guess using differentiable rendering for PSS is probabaly helpful?</del>). Anyway only the second\n                  term, the cross entropy term, has gradient. And the exciting part is:\n                </p>\n              </el-row>\n\n              <el-row class=\"row-bg\" justify=\"center\">\n                <p>\n                  <math-jax latex=\"$$\n                  \\begin{aligned}\n                  \\nabla_\\theta KL(p||q;\\theta) &= -\\nabla_\\theta \\int_\\Omega p(x)\\log q(x;\\theta) {\\rm d}x\\\\\n                                  &= \\mathbb{E}_{q(x;\\theta)} \\left[-\\frac{p(X)}{q(X;\\theta)} \\nabla_\\theta \\log q(X;\\theta) \\right]\\\\\n                  \\end{aligned}\n                  $$\" />\n                </p>\n              </el-row>\n\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  where the expectation is over <math-jax latex=\"X\\sim q(x;\\theta) \"/>, i.e. the samples are drawn from the learned generative model.\n                  Even if we could not know the normalizing term <math-jax latex=\"F\"/>, we could still simply use  <math-jax latex=\"f(x)=F\\cdot p(x)\"/> to substitute \n                  <math-jax latex=\"p(x)\"/>, as it would only introduce a constant factor in the gradient, which is not harmful for gradient descent.\n                  It just shows that minimizing the KL divergence via gradient descent is equivalent to minimizing the negative log likelihood weighted by Monte Carlo estimates of F .\n                </p>\n              </el-row>\n\n              <el-row class=\"row-bg\" justify=\"left\">\n                <h3 id=\"3.2\">3.2 Implementation and Experiments</h3>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  I implemented NICE <a href=\"#cite-nice\">[5]</a> and RealNVP <a href=\"#cite-realNVP\">[6]</a> in PyTorch framework.\n                  The specific implementation details for t/s transform are not declared in the papers, for NICE I use MLP for t transform, and for RealNVP I use \n                  a 2-MLP residual blocks for t-s transform (as Zheng et al. <a href=\"#cite-realNVP\">[9]</a> did). As RealNVP is more powerful than NICE,\n                  all the following experiments are based on RealNVP.\n                </p>\n                <p style=\"text-align:left\">\n                  First, I checked how the number of layers influence the expressivity. The \"converged\" results are shown in the following figure.\n                  But notice that all the results are not fully converged, I just cut the training process after their convergence becomes super slow.\n                </p>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"center\">\n                <el-image style=\"align:center\" src=\"https://imagehost-suikasibyl-us.oss-us-west-1.aliyuncs.com/img/expressivity.png\" />\n                <p><code>\n                  (0): the target image  <a href=\"https://pixabay.com/photos/statue-sculpture-figure-1275469/\">stone sculpture</a> / distribution (rings) <br/> \n                  (1): the same targets, but here darker pixels refers to higher density. <br/>\n                  (2): (quasi) convergenced distribution by 4 coupling layer RealNVP. <br/>\n                  (3): (quasi) convergenced distribution by 8 coupling layer RealNVP.\n                </code></p>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  We could clearly find that more numbers of coupling layers could have stronger expresivity. (a/b-3) fits the objective distribution better thant (a/b-2).\n                  This is exactly what we expected. It is said that Piecewise-polynomial coupling layer by Müller et al. <a href=\"#cite-nis\">[8]</a> has better expressivity\n                  for each layer, and thus could reduce the total number of layers, but I did not implement it here.\n                </p>\n                <p style=\"text-align:left\">\n                  Before training towards any complex distribution, we first start from a checkpoint that fits uniform bijection well.\n                  The process of training towards a uniform distribution is shown below:\n                </p>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"center\">\n                <el-image style=\"align:center\" src=\"https://imagehost-suikasibyl-us.oss-us-west-1.aliyuncs.com/uniform%2Btrain.gif\" />\n                <p><code>\n                  How RealNVP progressively learned to be a uniform bijection.\n                </code></p>\n              </el-row>\n\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  Then we train towards the target distribution. There are two ways to do it: <br/>\n                  (1) <b>Inverse Training</b>: Traditional way to do it in normalizing flow. Given X samples subject to target distribution, use Inverse\n                  transform to find corresponding latent vairable Z, and maximize the likelihood of generating X. Here we generate X samples by Metropolis-Hastings sampling\n                  with average 20 mutations per pixel. <br/>\n                  (2) <b>Forward Training:</b>: According to Müller et al. <a href=\"#cite-nis\">[8]</a> it is also possible to start from Z samples subject to priori distribution,\n                  use forward transform to find corresponding X samples, and maximize the KL divergence between F(X) values and pdf of X. In this process we do not need to generate\n                  samples subject to target distribution.<br/>\n                </p>\n                <p style=\"text-align:left\">\n                  I tried both and the results are shown below, both of them are using 16 affine coupling layers. I am <b>NOT</b> sure that there is no bug in forward training.\n                  But it seems that even though forward training could capture the main structure of the target distribution, it could hardly know where to go and get stuck\n                  at some low frequency status. This is not expected, because in Müller et al. <a href=\"#cite-nis\">[8]</a> get fairly not-that-bad results even when using affine layers.\n                  For further investigation, I will try to implement Piecewise-polynomial coupling layer and check the correctness of forward training code.\n                  But for the following experiments, I will only use inverse training for quality and simplicity.\n                </p>\n              </el-row>  \n              <el-row class=\"row-bg\" justify=\"center\">\n                <el-image style=\"align:center\" src=\"https://imagehost-suikasibyl-us.oss-us-west-1.aliyuncs.com/image_train.gif\" />\n                <p><code>\n                  How RealNVP progressively learned to be a uniform bijection.\n                </code></p>\n              </el-row>\n\n              <!-- Chapter 4: MCMC Neural Mutation -->\n              <el-row class=\"row-bg\" justify=\"left\">\n                <h2 id=\"4.\">4. Latent Space Mutation</h2>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"left\">\n                <h3 id=\"4.1\" style=\"margin-top: 0in;\">4.1 What Is & Why Latent Space Mutation</h3>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"left\">\n                <h4 style=\"margin-top: 0.1in;\">What is Latent Space Mutation<br/></h4>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  I proposed this concept to hopefully improve mutation for MLT, which is some kind of combination of importance sampling and Metropolis-Hastings sampling.\n                  I think the two closely related concepts are neural importance sampling and hidden markov model.\n                </p>\n                </el-row>\n              <el-row class=\"row-bg\" justify=\"center\">\n                <el-col :span=\"8\">\n                  <el-image style=\"align:center\" src=\"https://imagehost-suikasibyl-us.oss-us-west-1.aliyuncs.com/img/20230325132820.png\" />\n                  <p><code>\n                    Vanilla Metropolis-Hastings.\n                  </code></p>\n                  </el-col>\n                </el-row>\n              <el-row class=\"row-bg\" justify=\"center\">\n                <el-col :span=\"8\">\n                  <el-image style=\"align:center\" src=\"https://imagehost-suikasibyl-us.oss-us-west-1.aliyuncs.com/img/20230325132813.png\" />\n                  <p><code>\n                    Hidden Markov Model.\n                  </code></p>\n                  </el-col>\n                </el-row>\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  The original way of doing Metropolis-Hastings is tracking a Markov Chain on primal state x. But in Hidden Markov Model,\n                  we track a hidden state instead and generate X from another distribution <math-jax latex=\"p(x|z)\"/>. Now let's substitute\n                  it with a known bijection defined by the neural network for neural importance sampling.\n                </p>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"center\">\n                <el-col :span=\"8\">\n                  <el-image style=\"align:center\" src=\"https://imagehost-suikasibyl-us.oss-us-west-1.aliyuncs.com/img/20230325133905.png\" />\n                  <p><code>\n                    Vanilla Metropolis-Hastings.\n                  </code></p>\n                  </el-col>\n                </el-row>\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  Ideally the neural network should provides a bijection maps a uniform distribution Z to target distribution X, by some kind of warping.\n                  Thus we could do mutation like this:<br/>\n                  (1) Start from the start state <math-jax latex=\"X\"/>. <br/>\n                  (2) Mapping to latent space <math-jax latex=\"Z=g(X)\"/> . <br/>\n                  (3) Do common mutation in latent space <math-jax latex=\"Z'=mutate(Z)\"/>. <br/>\n                  (4) Mapping to primal space <math-jax latex=\"X'=f(Z')\"/> . <br/>\n                </p>\n                <p style=\"text-align:left\">\n                  Therefore we essentially want to do mutation in latent space instead of primal space. Here, the \"common strategy\" in step (3) refers to simple strategies like\n                  a uniform sampling large step and a normal sampling small step, mentioned in PBRT <a href=\"#cite-pbrt\">[3]</a>.\n                </p>\n                <p style=\"text-align:left\">\n                  But why should we do this? We could see how large step and small step works in latent space to get intuition.\n                </p>\n              </el-row>\n\n              <el-row class=\"row-bg\" justify=\"left\">\n                <h4 style=\"margin-top: 0.in;\">Ideal Large Step Mutation</h4>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  Let's start with something simpler, so consider the large step mutation first. In primal space, we uniform sample a random vector as proposal, which is very likely to be rejected.\n                  Using latent space mutation, we first generate a random vector in latent space and then map into primal space. Ideally, this mapping <math-jax latex=\"g(z)\"/> could produce\n                  x porportial to target distribution <math-jax latex=\"p\"/>.\n                </p>\n                <p style=\"text-align:left\">\n                  Considering detailed balance condition for <math-jax latex=\"X\"/> could be a little bit confusing, as describing <math-jax latex=\"T(X\\rightarrow X')\"/> is not clear.\n                  But we could consider the latent/hidden Markov chain, the underlying latent distribution <math-jax latex=\"Z\"/> is also equilibrium to a uniform distribution.\n                  <math-jax latex=\"f(Z)=f(Z')=1\"/> and <math-jax latex=\"T(Z\\rightarrow Z')=T(Z'\\rightarrow Z)=1\"/>, thus the classical acceptance ratio is:\n                  <math-jax latex=\"a(Z\\rightarrow Z')=1\"/>.\n                </p>\n                <p style=\"text-align:left\">\n                  Thus what actually happen is we proporse a random vector proportional to <math-jax latex=\"p\"/>, and then we always accept it. This is exactly\n                  the process of optimal importance sampling, which is the best way to do sampling. It does immediate convergence and has no correlation between samples.\n                </p>\n              </el-row>\n\n              <el-row class=\"row-bg\" justify=\"left\">\n                <h4 style=\"margin-top: 0.in;\">Ideal Small Step Mutation</h4>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  In small step case, things become a little bit subtle. Ideally, the mapping from Z to X is some kind of warping that makes \n                  uniform Z concentrated to the dense regions of X. In a ideal case the mapping is super smooth and regular (in practice, RealNVP could hardly achieve this).\n                </p>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"center\">\n                <el-col :span=\"14\">\n                  <el-image style=\"align:center\" src=\"https://imagehost-suikasibyl-us.oss-us-west-1.aliyuncs.com/img/20230325135516.png\" />\n                  <p><code>\n                    Mapping from Z to X is some warping.\n                  </code></p>\n                  </el-col>\n                </el-row>\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  But let' assume this happens. We do a isotropic Gaussian from the start state (red point) and produce two possible mutated positions (blue and green points).\n                  If we do this mutation is primal step, they would located in low-probability regions and are likely to be rejected. On the other hand, if we do this mutation in latent space,\n                  This samples would be warpped by the mapping and agian located in high-probability regions. The rotation and scaling of the Gaussian are just adaptive,\n                  a narrow axis would be squeezed by the warping and result in a more narrow Gaussian, as shown in the figure below.\n                </p>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"center\">\n                <el-col :span=\"14\">\n                  <el-image style=\"align:center\" src=\"https://imagehost-suikasibyl-us.oss-us-west-1.aliyuncs.com/img/20230325135315.png\" />\n                  <p><code>\n                    The first row: latent space mutation. <br/>\n                    The second row: primal space mutation.\n                  </code></p>\n                  </el-col>\n                </el-row>\n                <p style=\"text-align:left\">\n                  Again when the underlying latent distribution <math-jax latex=\"Z\"/> is equilibrium to a uniform distribution,\n                  <math-jax latex=\"f(Z)=f(Z')=1\"/> and <math-jax latex=\"T(Z\\rightarrow Z')=T(Z'\\rightarrow Z)=1\"/>, and the classical acceptance ratio is again:\n                  <math-jax latex=\"a(Z\\rightarrow Z')=1\"/>. Which means we has 1 acceptance rate and 0 rejection rate when reaching equilibrium, while \n                  still be able to exporling the neighbor space.\n                </p>\n\n                <el-row class=\"row-bg\" justify=\"left\">\n                  <h4 style=\"margin-top: 0.in;\">To be NOT ideal</h4>\n                </el-row>\n                <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  Interestingly, we could see that in ideal case, both large step and small step mutations are just importance sampling. The large step is \n                  just how we commonly do importance sampling, while the small step is a random walk version of it. The isotropic random walk in latent space finally\n                  would create a sequence of uniform samples in latent space and would be mapped to exactly the target distribution in primal space.\n                </p>\n                <p style=\"text-align:left\">\n                  The truth is, things are NOT ideal. But this truth would not frustrate us, we could see that sub-optimal importance sampling still helps us a lot in\n                  convergence rate. Thus we could expect that a suboptimal neural (and even non-neural) latent space mutation would also help us, as some kind of \n                  interpolation between optimal importance sampling and dummy metropolis-hastings.\n                </p>\n                <p style=\"text-align:left\">\n                  Something different is we could no longer do acceptance in latent space. As the mapping is not perfect, a uniform sampling in Z would not\n                  recover the correct p(x) in primal space, so we should do acceptancein primal space. But this would introduce a new problem: we must\n                  evaluate the transition probability <math-jax latex=\"T(X\\rightarrow X')\"/>. I am not sure in this part, it might be similar to primal mutation or need some additional\n                  Jacobian, I need to do more experiments on this.\n                </p>\n              </el-row>\n\n              <el-row class=\"row-bg\" justify=\"left\">\n                <h3 id=\"4.2\" style=\"margin-top: 0in;\">4.2 Monochrome 2D Distribution</h3>\n              </el-row>\n\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  To quickly verify the design, we do experiments on a simple monochrome 2D distribution.\n                </p>\n              </el-row>\n              \n              <el-row class=\"row-bg\" justify=\"left\">\n                <h3 id=\"4.2\" style=\"margin-top: 0in;\">4.3 Neural Mutate the Metropolis Light Transport</h3>\n              </el-row>\n\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  I also tried to use the neural mutation to mutate the Metropolis Light Transport. The result is not very good, but I think it is still worth to share.\n                </p>\n                <p style=\"text-align:left\">\n                  It is actually quite a disaster when implementating this: NaNs are everywhere. As soon as I raise the dimension from 2D to 48-dim, the gradient is unstable,\n                  if the layers are too deep, NaNs will quickly appear in gradients and then in loss, as far as I checked it is kind of related to logit-sigmoid mapping\n                  which do exponential operations. As a result I only use 4 coupling layers with 48 dimensions (I use at most 48 PSS random variables for a path).\n                </p>\n                <p style=\"text-align:left\">\n                  For MMLT, we have different depth so I think we should use different models for different depths. We could consider a path that is important for depth 4,\n                  then its subpath would not be important for depth 3 unless the last vertex is also on light source. In this experiment, I only test the case that has depth 4.\n                </p>\n                <p style=\"text-align:left\">\n                  The test scene is a glass Stanford bunny, we could see that most important path with depth 4 are on the bunny:\n                </p>\n              </el-row>\n              \n              <el-row class=\"row-bg\" justify=\"center\">\n                <el-col>\n                  <div id=\"alldepthvsdpeth4\"></div>\n                  <p><code>left: result with depth 0-4 | right: only using depth 4</code></p>\n                </el-col>\n              </el-row>\n\n\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  Bothered by the NaNs, I only use 4 layers so the expressivity is significantly not that good in high dimensions. The figure below\n                  shows the comparison between the target distribution and the learned distribution. The target distribution are generated by the\n                  MLT, and all the images are showing their projection on 2 of 48 dims. \n                </p>\n              </el-row>\n\n              <el-row class=\"row-bg\" justify=\"center\">\n                <el-col :span=\"11\">\n                  <el-image style=\"align:center\" src=\"https://imagehost-suikasibyl-us.oss-us-west-1.aliyuncs.com/img/learned.png\" />\n                  <p><code>\n                    Comparison between target and learned distribution. Notice that the target distribution are curved to show subtle details.\n                  </code></p>\n                </el-col>\n              </el-row>\n              \n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  And in actual rendering we need to input current sample stream to the neural network every frame, so we need to do \n                  inter-process communication. I choose to do this by using a socket on localhost, which is actually not that slow.\n                  The whole frame including MMLT tracing, neural mutation and socket communication runs at 3~4 fps. I believe with some\n                  optimization we could reach some real-time frame rate.\n                  The whole pipeline for each frame is shown below: \n                </p>\n              </el-row>\n\n              <el-row class=\"row-bg\" justify=\"center\">\n                <el-col :span=\"12\">\n                  <el-image style=\"align:center\" src=\"https://imagehost-suikasibyl-us.oss-us-west-1.aliyuncs.com/img/20230325160712.png\" />\n                  <p><code>\n                    My pipeline per frame.\n                  </code></p>\n                </el-col>\n              </el-row>\n\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  First we test the case that we always use large step mutation. This generally works as expected that using latent\n                  neural mutation could concentrate more on important regions just as importance sampling does.\n                  The figure shows how they look like after 50 frames:\n                </p>\n              </el-row>\n\n              <el-row class=\"row-bg\" justify=\"center\">\n                <el-col>\n                  <div id=\"largestep\"></div>\n                  <p><code>left: Using primal mutation | right: Using latent mutation </code></p>\n                </el-col>\n              </el-row>\n\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  Then we test the case that we always use small step mutation. And this turns out to be a failure. I beleive this is\n                  the part that is really valuable so I think I should really spend more time figuring out why.\n                  The figure shows how they look like after 200 frames:\n                </p>\n              </el-row>\n\n\n              <el-row class=\"row-bg\" justify=\"center\">\n                <el-col>\n                  <div id=\"smallstep\"></div>\n                  <p><code>left: Using primal mutation | right: Using latent mutation </code></p>\n                </el-col>\n              </el-row>\n\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  It seems that the latent mutation is more noisy but less correlated. But it is not better in acceptance rate,\n                  opposite to what I expected. Using primal space mutation has acceptance rate of 0.62, while using latent space\n                  mutation has acceptance rate of 0.35. It is really frustrating.\n                </p>\n              </el-row>\n\n              <el-row class=\"row-bg\" justify=\"center\">\n                <el-col :span=\"12\">\n                  <el-image style=\"align:center\" src=\"https://imagehost-suikasibyl-us.oss-us-west-1.aliyuncs.com/img/20230325184734.png\" />\n                  <p><code>\n                    Non-optimal convergence to target distribution.\n                  </code></p>\n                </el-col>\n              </el-row>\n\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  I think a possible reason is by RealNVP converges to something \"no regular\". Here \"optimal transport\" might be a more accurate\n                  word. We could see in practice that the mapping does not go in the optimal transport way, but getting somme strange distortion.\n                  They would produce quite similar approaching to the target distribution, and this is not a problem for importance sampling.\n                </p>\n              </el-row>\n\n              <el-row class=\"row-bg\" justify=\"center\">\n                <el-col :span=\"9\">\n                  <el-image style=\"align:center\" src=\"https://imagehost-suikasibyl-us.oss-us-west-1.aliyuncs.com/img/20230325184745.png\" />\n                  <p><code>\n                    Problematic mapping.\n                  </code></p>\n                </el-col>\n              </el-row>\n\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  But in latent space mutation, it could be harmful. We could observe that two points very close in primal space could be \n                  mapped into two far away points in latent space. The distance / neighbor properties are not preserved well. This will\n                  cause latent mutation could not traverse the neighbor region well and making things noisy.\n                </p>\n              </el-row>\n\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  To solve this, I should try to constraint the neural network to do optimal transport.\n                  There are already some works on this, like OT-Flow  <a href=\"#cite-otflow\">[11]</a> and CP-Flow <a href=\"#cite-cpflow\">[12]</a>.\n                  But I did not have time to read them yet.\n                </p>\n              </el-row>\n\n              <!-- Chapter 5: Survey on Mutation and Neural Mutation -->\n              <el-row class=\"row-bg\" justify=\"left\">\n                <h2 id=\"5.\">5. Future Works</h2>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  Clearly the project is not completed yet. Here are some possible future works to do:\n                </p>\n                <p style=\"text-align:left\">\n                  (1). Check the transition probability whether need Jacobian. <br/>\n                  (2). Try more on the forward training and piecewise-polynomial coupling layer. <br/>\n                  (3). Try non-neural importance mapping (like cosine-weighted or Gaussian like mapping ?). <br/>\n                  (4). Try training a more powerful and efficient high-dim model. <br/>\n                  (5). Learn more about the optimal-transport stuff. <br/>\n                  (6). Optimize BDPT and MLT for GPU. <br/>\n                  (7). Try integrating neural mutation into C++ pipeline by CUDA / Vulkan ML like things. <br/>\n                  (8). ......\n                </p>\n              </el-row>\n\n              <!-- Chapter 5: Survey on Mutation and Neural Mutation -->\n              <!-- <el-row class=\"row-bg\" justify=\"left\">\n                <h2 id=\"6.\">6. Survey on Mutation and Neural Mutation</h2>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"left\">\n                <h3 id=\"4.1\" style=\"margin-top: 0in;\">4.1 Some Theory behind Neural Mutation</h3>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  Normalizing flow is an useful technique to generate samples subject to some certain distributions by a neural network.\n                  But the really interesting part that makes it different from other generative models is that it actually creates a\n                  bijection between two distributions, which means the jacobian of the transformation is computable.\n                </p>\n                <p style=\"text-align:left\">\n                  Assume the transition kernel <math-jax latex=\"T_\\theta\"/> is defined through an implicit generative model\n                  <math-jax latex=\"f_\\theta(\\cdot|x, v)\"/>, where <math-jax latex=\" v \\sim \\rho(v)\"/> is an auxiliary random variable.\n                </p>\n                <p style=\"text-align:left\">\n                  Markov GAN (MGAN):\n                  <math-jax latex=\"f_\\theta(\\cdot|x, v)\"/>, where <math-jax latex=\" v \\sim \\rho(v)\"/> is an auxiliary random variable.\n                </p>\n              </el-row>\n\n              <el-row class=\"row-bg\" justify=\"left\">\n                <h3 id=\"4.2\" style=\"margin-top: 0in;\">4.2 Latent Space Mutation</h3>\n              </el-row>\n              <el-row class=\"row-bg\" justify=\"left\">\n                <p style=\"text-align:left\">\n                  Normalizing.\n                </p>\n              </el-row> -->\n\n              <!-- Reference -->\n              <el-row class=\"row-bg\" justify=\"left\">\n                <h2 id=\"Reference\" style=\"text-align:left\">Reference</h2>\n                <ol style=\"padding-left: 20px;\">\n                  <li  id=\"cite-veach\" style=\"text-align:left; list-style-type:decimal; list-style-position:outside;\">\n                    <a href=\"http://graphics.stanford.edu/papers/veach_thesis/\">\n                      Eric Veach. 1998. Robust monte carlo methods for light transport simulation. Ph.D. Dissertation. Stanford University, Stanford, CA, USA. Advisor(s) Leonidas J. Guibas. Order Number: AAI9837162.\n                    </a>\n                  </li>\n                  <li  id=\"cite-mmlt\" style=\"text-align:left; list-style-type:decimal; list-style-position:outside;\">\n                    <a href=\"https://dl.acm.org/doi/10.1145/2601097.2601138\">\n                      Toshiya Hachisuka, Anton S. Kaplanyan, and Carsten Dachsbacher. 2014. Multiplexed metropolis light transport. ACM Trans. Graph. 33, 4, Article 100 (July 2014), 10 pages. https://doi.org/10.1145/2601097.2601138\n                    </a>\n                  </li>\n                  <li  id=\"cite-pbrt\" style=\"text-align:left; list-style-type:decimal; list-style-position:outside;\">\n                    <a href=\"https://rgl.epfl.ch/software/PBRT\">\n                      Matt Pharr, Wenzel Jakob, and Greg Humphreys. 2016. Physically Based Rendering: From Theory to Implementation (3rd ed.). Morgan Kaufmann Publishers Inc., San Francisco, CA, USA.\n                    </a>\n                  </li>\n                  <li  id=\"cite-pssmlt\" style=\"text-align:left; list-style-type:decimal; list-style-position:outside;\">\n                    <a href=\"http://cg.iit.bme.hu/~szirmay/paper50_electronic.pdf\">\n                      KELEMEN, C., SZIRMAY-KALOS, L., ANTAL, G., AND CSONKA, F. 2002. A simple and robust mutation strategy for the Metropolis light transport algorithm. Computer Graphics Forum 21, 3, 531–540.\n                    </a>\n                  </li>\n                  <li  id=\"cite-nice\" style=\"text-align:left; list-style-type:decimal; list-style-position:outside;\">\n                    <a href=\"https://doi.org/10.48550/arXiv.1410.8516\">\n                      Laurent Dinh, David Krueger and Yoshua Bengio. 2015. NICE: Non-linear Independent Components Estimation. https://doi.org/10.48550/arXiv.1410.8516\n                    </a>\n                  </li>\n                  <li  id=\"cite-realNVP\" style=\"text-align:left; list-style-type:decimal; list-style-position:outside;\">\n                    <a href=\"https://doi.org/10.48550/arXiv.1605.08803\">\n                      Laurent Dinh, Jascha Sohl-Dickstein and Samy Bengio. 2017. Density estimation using Real NVP. https://doi.org/10.48550/arXiv.1605.08803\n                    </a>\n                  </li>\n                  <li  id=\"cite-realNVP\" style=\"text-align:left; list-style-type:decimal; list-style-position:outside;\">\n                    <a href=\"https://doi.org/10.48550/arXiv.1807.03039\">\n                      Diederik P. Kingma and Prafulla Dhariwal. 2018. Glow: Generative Flow with Invertible 1x1 Convolutions. https://doi.org/10.48550/arXiv.1807.03039\n                    </a>\n                  </li>\n                  <li  id=\"cite-nis\" style=\"text-align:left; list-style-type:decimal; list-style-position:outside;\">\n                    <a href=\"https://dl.acm.org/doi/10.1145/3341156\">\n                      Thomas Müller, Brian Mcwilliams, Fabrice Rousselle, Markus Gross, and Jan Novák. 2019. Neural Importance Sampling. ACM Trans. Graph. 38, 5, Article 145 (October 2019), 19 pages. https://doi.org/10.1145/3341156\n                    </a>\n                  </li>\n                  <li  id=\"cite-npssis\" style=\"text-align:left; list-style-type:decimal; list-style-position:outside;\">\n                    <a href=\"https://arxiv.org/abs/1808.07840\">\n                      Quan Zheng and Matthias Zwicker. 2018. Learning to Importance Sample in Primary Sample Space. https://arxiv.org/abs/1808.07840\n                    </a>\n                  </li>\n                  <li  id=\"cite-ris\" style=\"text-align:left; list-style-type:decimal; list-style-position:outside;\">\n                    <a href=\"https://dl.acm.org/doi/10.5555/2383654.2383674\">\n                      Justin F. Talbot, David Cline, and Parris Egbert. 2005. Importance resampling for global illumination. In Proceedings of the Sixteenth Eurographics conference on Rendering Techniques (EGSR '05). Eurographics Association, Goslar, DEU, 139–146.\n                    </a>\n                  </li>\n                  <li  id=\"cite-otflow\" style=\"text-align:left; list-style-type:decimal; list-style-position:outside;\">\n                    <a href=\"https://arxiv.org/abs/2006.00104#:~:text=OT%2DFlow%3A%20Fast%20and%20Accurate%20Continuous%20Normalizing%20Flows%20via%20Optimal%20Transport,-Derek%20Onken%2C%20Samy&text=A%20normalizing%20flow%20is%20an,density%20estimation%20and%20statistical%20inference.\">\n                      Derek Onken, Samy Wu Fung, Xingjian Li, and Lars Ruthotto. 2021. OT-Flow: Fast and Accurate Continuous Normalizing Flows via Optimal Transport.\n                    </a>\n                  </li>\n                  <li  id=\"cite-cpflow\" style=\"text-align:left; list-style-type:decimal; list-style-position:outside;\">\n                    <a href=\"chrome-extension://ikhdkkncnoglghljlkmcimlnlhkeamad/pdf-viewer/web/viewer.html?file=https%3A%2F%2Fopenreview.net%2Fpdf%3Fid%3Dte7PVH1sPxJ#=&zoom=auto\">\n                      Chin-Wei Huang, Ricky T. Q. Chen, Christos Tsirigotis, and Aaron Courville. 2021. Convex Potential Flows: Universal Probability Distribution With Optimal Transport and Covnex Optimization.\n                    </a>\n                  </li>\n                </ol>\n              </el-row>\n            </el-main>\n            <el-divider />\n            <el-footer>\n              <el-link href=\"https://suikasibyl.github.io/\" target=\"_blank\" type=\"primary\">My Homepage</el-link>\n            </el-footer>\n          </el-container>\n        </el-container>\n      </el-container>\n    </el-container>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.el-link {\n  margin-right: 8px;\n}\n.el-link .el-icon--right.el-icon {\n  vertical-align: text-bottom;\n}\n</style>\n\n<script>\n\nimport '../assets/githubmd.css';\nimport SliderBar from 'before-after-slider'; // import\n\nexport default {\n  name: 'ReportPage',\n  mounted() {\n    // new SliderBar({options});\n    new SliderBar({\n      el: '#udptvsbdpt',\n      beforeImg: 'https://imagehost-suikasibyl-us.oss-us-west-1.aliyuncs.com/img/udpt500small.png',\n      afterImg: 'https://imagehost-suikasibyl-us.oss-us-west-1.aliyuncs.com/img/bdpt500small.png'\n    });\n    new SliderBar({\n      el: '#bdptvsmlt',\n      beforeImg: 'https://imagehost-suikasibyl-us.oss-us-west-1.aliyuncs.com/img/bdpt500small.png',\n      afterImg: 'https://imagehost-suikasibyl-us.oss-us-west-1.aliyuncs.com/img/mlt500small_fix.png'\n    });\n    new SliderBar({\n      el: '#alldepthvsdpeth4',\n      beforeImg: 'https://imagehost-suikasibyl-us.oss-us-west-1.aliyuncs.com/img/depth0to3.png',\n      afterImg: 'https://imagehost-suikasibyl-us.oss-us-west-1.aliyuncs.com/img/depth3only.png'\n    });\n    new SliderBar({\n      el: '#largestep',\n      beforeImg: 'https://imagehost-suikasibyl-us.oss-us-west-1.aliyuncs.com/img/nonneural_50frame.png',\n      afterImg: 'https://imagehost-suikasibyl-us.oss-us-west-1.aliyuncs.com/img/neural_50frame.png'\n    });\n    new SliderBar({\n      el: '#smallstep',\n      beforeImg: 'https://imagehost-suikasibyl-us.oss-us-west-1.aliyuncs.com/img/nonneural_200small.png',\n      afterImg: 'https://imagehost-suikasibyl-us.oss-us-west-1.aliyuncs.com/img/neural_200small.png'\n    });\n  },\n  props: {\n  },\n  data() {\n    return {\n      formula: '$$x = {-b \\\\pm \\\\sqrt{b^2-4ac} \\\\over 2a}.$$'\n    }\n  },\n}\n</script>\n","import { render } from \"./ReportPage.vue?vue&type=template&id=fdb4d35c&scoped=true\"\nimport script from \"./ReportPage.vue?vue&type=script&lang=js\"\nexport * from \"./ReportPage.vue?vue&type=script&lang=js\"\n\nimport \"./ReportPage.vue?vue&type=style&index=0&id=fdb4d35c&scoped=true&lang=css\"\n\nimport exportComponent from \"P:\\\\GitProjects\\\\CSE272-Report-WebPage\\\\mltwebpage\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-fdb4d35c\"]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=cfbbbbce\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=cfbbbbce&lang=css\"\n\nimport exportComponent from \"P:\\\\GitProjects\\\\CSE272-Report-WebPage\\\\mltwebpage\\\\node_modules\\\\vue-loader\\\\dist\\\\exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { createApp } from 'vue'\nimport ElementPlus from 'element-plus';\nimport MathJax, { initMathJax, renderByMathjax } from \"mathjax-vue3\";\nimport 'element-plus/dist/index.css';\nimport App from './App.vue'\n\nfunction onMathJaxReady() {\n    const el = document.getElementById(\"elementId\");\n    renderByMathjax(el);\n  }\n  \ninitMathJax({}, onMathJaxReady);\n  \n\nconst app = createApp(App);\napp.use(ElementPlus);\napp.use(MathJax);\napp.mount('#app')","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkmltwebpage\"] = self[\"webpackChunkmltwebpage\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(4706); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createBlock","_component_ReportPage","class","_createElementVNode","id","style","href","width","height","src","title","frameborder","allow","allowfullscreen","_createElementBlock","_hoisted_1","_hoisted_2","_createVNode","_component_el_container","_component_el_header","_hoisted_3","_component_el_main","_component_el_row","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","justify","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_component_el_col","span","_component_el_image","_hoisted_18","_hoisted_19","_hoisted_20","_hoisted_21","_hoisted_22","_hoisted_23","_hoisted_24","_hoisted_25","_hoisted_26","_hoisted_27","_hoisted_28","_hoisted_29","_hoisted_30","_hoisted_31","_hoisted_32","_hoisted_33","_hoisted_34","_hoisted_35","_hoisted_36","_hoisted_37","_component_math_jax","latex","_hoisted_38","_hoisted_39","_hoisted_40","_hoisted_41","_hoisted_42","_hoisted_43","_hoisted_44","_hoisted_45","_hoisted_46","_hoisted_47","_hoisted_48","_hoisted_49","_hoisted_50","_hoisted_51","_hoisted_52","_hoisted_53","_hoisted_54","_hoisted_55","_hoisted_56","_hoisted_57","_hoisted_58","_hoisted_59","_hoisted_60","_hoisted_61","_hoisted_62","_hoisted_63","_hoisted_64","_hoisted_65","_hoisted_66","_hoisted_67","_hoisted_68","_hoisted_69","_hoisted_70","_hoisted_71","_hoisted_72","_hoisted_73","_hoisted_74","_hoisted_75","_hoisted_76","_hoisted_77","_hoisted_78","_hoisted_79","_hoisted_80","_hoisted_81","_hoisted_82","_hoisted_83","_hoisted_84","_hoisted_85","_hoisted_86","_hoisted_87","_hoisted_88","_hoisted_89","_hoisted_90","_hoisted_91","_hoisted_92","_hoisted_93","_hoisted_94","_hoisted_95","_hoisted_96","_hoisted_97","_hoisted_98","_hoisted_99","_hoisted_100","_hoisted_101","_hoisted_102","_hoisted_103","_hoisted_104","_hoisted_105","_hoisted_106","_hoisted_107","_hoisted_108","_hoisted_109","_hoisted_110","_hoisted_111","_hoisted_112","_hoisted_113","_hoisted_114","_hoisted_115","_component_el_divider","_component_el_footer","_component_el_link","target","type","name","mounted","SliderBar","el","beforeImg","afterImg","props","data","formula","__exports__","components","ReportPage","render","onMathJaxReady","document","getElementById","renderByMathjax","initMathJax","app","createApp","App","use","ElementPlus","MathJax","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","call","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","length","fulfilled","j","Object","keys","every","key","splice","r","n","getter","__esModule","d","a","definition","o","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","forEach","bind","push","__webpack_exports__"],"sourceRoot":""}